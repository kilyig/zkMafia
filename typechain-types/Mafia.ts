/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface MafiaInterface extends utils.Interface {
  functions: {
    "announceRole()": FunctionFragment;
    "areTheyAlive(address)": FunctionFragment;
    "executeVote()": FunctionFragment;
    "playMafia(bytes,address)": FunctionFragment;
    "startGame()": FunctionFragment;
    "vote(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "announceRole"
      | "areTheyAlive"
      | "executeVote"
      | "playMafia"
      | "startGame"
      | "vote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "announceRole",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "areTheyAlive",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeVote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "playMafia",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "startGame", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "announceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "areTheyAlive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "playMafia", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {};
}

export interface Mafia extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MafiaInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    announceRole(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    areTheyAlive(
      friend: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { status: boolean }>;

    executeVote(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    playMafia(
      _proof: PromiseOrValue<BytesLike>,
      victimAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vote(
      suspect: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  announceRole(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  areTheyAlive(
    friend: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  executeVote(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  playMafia(
    _proof: PromiseOrValue<BytesLike>,
    victimAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startGame(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vote(
    suspect: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    announceRole(overrides?: CallOverrides): Promise<void>;

    areTheyAlive(
      friend: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    executeVote(overrides?: CallOverrides): Promise<void>;

    playMafia(
      _proof: PromiseOrValue<BytesLike>,
      victimAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    startGame(overrides?: CallOverrides): Promise<void>;

    vote(
      suspect: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    announceRole(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    areTheyAlive(
      friend: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeVote(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    playMafia(
      _proof: PromiseOrValue<BytesLike>,
      victimAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vote(
      suspect: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    announceRole(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    areTheyAlive(
      friend: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeVote(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    playMafia(
      _proof: PromiseOrValue<BytesLike>,
      victimAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startGame(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      suspect: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  PayableOverrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Mafia, MafiaInterface } from "../Mafia";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_proveRoleVerifier",
        type: "address",
      },
      {
        internalType: "address",
        name: "_roleRevealVerifier",
        type: "address",
      },
    ],
    stateMutability: "payable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "announceRole",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "friend",
        type: "address",
      },
    ],
    name: "areTheyAlive",
    outputs: [
      {
        internalType: "bool",
        name: "status",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "executeVote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_proof",
        type: "bytes",
      },
      {
        internalType: "address",
        name: "victimAddress",
        type: "address",
      },
    ],
    name: "playMafia",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "startGame",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "suspect",
        type: "address",
      },
    ],
    name: "vote",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052604051610c17380380610c178339810160408190526100229161006f565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100a2565b80516001600160a01b038116811461006a57600080fd5b919050565b6000806040838503121561008257600080fd5b61008b83610053565b915061009960208401610053565b90509250929050565b610b66806100b16000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632407b5dc146100675780636dd7d8ea146100a7578063736c509f146100ba578063bfa06830146100bc578063d65ab5f2146100c4578063d8c4039a146100cc575b600080fd5b610093610075366004610934565b6001600160a01b031660009081526002602052604090205460ff1690565b604051901515815260200160405180910390f35b6100ba6100b5366004610934565b6100df565b005b6100ba6102f5565b6100ba610532565b6100ba6100da36600461096c565b610771565b3360009081526002602052604090205460ff1661014f5760405162461bcd60e51b815260206004820152602360248201527f446561642f756e7265676973746572656420706c617965722063616e277420766044820152626f746560e81b60648201526084015b60405180910390fd5b336000908152600460205260409020546001600160a01b0316156101b55760405162461bcd60e51b815260206004820152601960248201527f43616e277420766f7465206d6f7265207468616e206f6e6365000000000000006044820152606401610146565b6001600160a01b03811660009081526002602052604090205460ff1661021d5760405162461bcd60e51b815260206004820152601a60248201527f4d616b652073757265207375737065637420697320616c6976650000000000006044820152606401610146565b60075460ff161561027c5760405162461bcd60e51b8152602060048201526024808201527f43616e206f6e6c7920766f746520746f206b696c6c20647572696e67207468656044820152632064617960e01b6064820152608401610146565b33600090815260046020908152604080832080546001600160a01b0319166001600160a01b0386169081179091558352600590915281208054916102bf83610a44565b91905055506001600260070160008282546102da9190610a5d565b9091555050600a54600954036102f2576102f26102f5565b50565b60008060005b600654811015610407576001600160a01b0382166000908152600560208190526040822054600680549193918590811061033757610337610a75565b60009182526020808320909101546001600160a01b03168352820192909252604001902054111561039457600680548290811061037657610376610a75565b60009182526020822001549093506001600160a01b031691506103f5565b6001600160a01b038216600090815260056020819052604082205460068054919391859081106103c6576103c6610a75565b60009182526020808320909101546001600160a01b03168352820192909252604001902054036103f557600192505b806103ff81610a44565b9150506102fb565b5081610441576001600160a01b0381166000908152600260205260408120805460ff19169055600a80549161043b83610a8b565b91905055505b6001600260060160008282546104579190610a5d565b90915550506007805460ff19166001179055600060098190555b60065481101561052d576000600260030160006002600401848154811061049a5761049a610a75565b60009182526020808320909101546001600160a01b03168352820192909252604001812091909155600680546004918391859081106104db576104db610a75565b6000918252602080832091909101546001600160a01b039081168452908301939093526040909101902080546001600160a01b031916929091169190911790558061052581610a44565b915050610471565b505050565b6040805160a08101825273f39fd6e51aad88f6f4ce6ab8827279cfffb9226681527370997970c51812dc3a010c7d01b50e0d17dc79c86020820152733c44cdddb6a900fa2b585dd299e03d12fa4293bc918101919091527390f79bf6eb2c4f870365e785982e1f101e93b90660608201527315d34aaf54267db7d7c367839aaf71a00a2c6a6560808201526105cb90600690600561089e565b506040805160a0810182527f26ef38b3202a99ac35fe7ee4c3a6f7c6426ea6c2efa34073a7a91bc308b0f6ce81527f2d80907c69cecc68fbd43a0299e25ceb6d81340cc36f8776a491ac05f1742e2f60208201527ef649ef5b95797dae1c5e0a46ecb4513812a91b038d26d68a4b1f5f5afe24ab918101919091527f2baf78ba8b20da37793a85632e98dee3a8c9e33260553e7a8576697148e8f48c60608201527f0440661377df8c650e0f27cad4a04257dc6e9f603d2febe8ab622f755787ef85608082015260005b60065481101561075a57600160026000016000600260040184815481106106be576106be610a75565b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff191691151591909117905581816005811061070457610704610a75565b6020020151600680546003916000918590811061072357610723610a75565b60009182526020808320909101546001600160a01b031683528201929092526040019020558061075281610a44565b915050610695565b5050600654600a556007805460ff19166001179055565b60005460405163473b057f60e11b81526001600160a01b0390911690638e760afe906107a1908590600401610aa2565b602060405180830381865afa1580156107be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e29190610af7565b506001600160a01b03811660009081526002602052604090205460ff16151560011461080d57600080fd5b60075460ff166108585760405162461bcd60e51b815260206004820152601660248201527518d85b881bdb9b1e481ada5b1b08185d081b9a59da1d60521b6044820152606401610146565b6001600160a01b0381166000908152600260205260408120805460ff19169055600a80546001929061088b908490610b19565b90915550506007805460ff191690555050565b8280548282559060005260206000209081019282156108f3579160200282015b828111156108f357825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906108be565b506108ff929150610903565b5090565b5b808211156108ff5760008155600101610904565b80356001600160a01b038116811461092f57600080fd5b919050565b60006020828403121561094657600080fd5b61094f82610918565b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561097f57600080fd5b823567ffffffffffffffff8082111561099757600080fd5b818501915085601f8301126109ab57600080fd5b8135818111156109bd576109bd610956565b604051601f8201601f19908116603f011681019083821181831017156109e5576109e5610956565b816040528281528860208487010111156109fe57600080fd5b826020860160208301376000602084830101528096505050505050610a2560208401610918565b90509250929050565b634e487b7160e01b600052601160045260246000fd5b600060018201610a5657610a56610a2e565b5060010190565b60008219821115610a7057610a70610a2e565b500190565b634e487b7160e01b600052603260045260246000fd5b600081610a9a57610a9a610a2e565b506000190190565b600060208083528351808285015260005b81811015610acf57858101830151858201604001528201610ab3565b81811115610ae1576000604083870101525b50601f01601f1916929092016040019392505050565b600060208284031215610b0957600080fd5b8151801515811461094f57600080fd5b600082821015610b2b57610b2b610a2e565b50039056fea26469706673582212203011da85ea37d3ddd381fe6f37c4a9fdaab1a87a7b36f6578d5854840b0ec38064736f6c634300080d0033";

type MafiaConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MafiaConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Mafia__factory extends ContractFactory {
  constructor(...args: MafiaConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _proveRoleVerifier: PromiseOrValue<string>,
    _roleRevealVerifier: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<Mafia> {
    return super.deploy(
      _proveRoleVerifier,
      _roleRevealVerifier,
      overrides || {}
    ) as Promise<Mafia>;
  }
  override getDeployTransaction(
    _proveRoleVerifier: PromiseOrValue<string>,
    _roleRevealVerifier: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _proveRoleVerifier,
      _roleRevealVerifier,
      overrides || {}
    );
  }
  override attach(address: string): Mafia {
    return super.attach(address) as Mafia;
  }
  override connect(signer: Signer): Mafia__factory {
    return super.connect(signer) as Mafia__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MafiaInterface {
    return new utils.Interface(_abi) as MafiaInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Mafia {
    return new Contract(address, _abi, signerOrProvider) as Mafia;
  }
}
